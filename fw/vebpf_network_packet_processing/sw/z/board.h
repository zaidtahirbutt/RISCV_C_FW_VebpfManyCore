////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./board.h
//
// Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . allclocks.txt global.txt dlyarbiter.txt version.txt buserr.txt pwrcount.txt bustimer.txt wbfft.txt spio.txt gpio.txt wbuconsole.txt bkram.txt flash.txt picorv.txt pic.txt mdio1.txt enet.txt enetscope.txt flashscope.txt mem_flash_bkram.txt mem_bkram_only.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
// Make this constant equal to 1 if you are generating hex file for simulation and 0 for synthesis
// for SIMULATION_TESTING = 1, error printf() statements will not be printed, only error led = 5 will be turned on for errors
#define SIMULATION_TESTING 0

// for DEBUG == 1 both error LED value = 5 will turn on for errors and printf() statements for errors will be printed out 
#define DEBUG 0 //1 //0 //1 //0//1 //0 // 0 //0 //1 //0 // 1 //0 //1 

// this constant should be equal to TX_PKT_DESC_TABLE_DEPTH parameter from network subsystem
#define DESC_TABLE_TX_DEPTH 4  // should be multiple of 2 and if changed here, it should be changed in network subsystem hardware
	// VIP!! -> ALSO DEFINED IN pkt.h SO CHANGE IN THAT FILE AS WELL IF ANY CHANGE NEEDS TO BE MADE HERE

#define BITS_REQ_FOR_DESC_TABLE_TX_DEPTH 2  // logBASE2(DESC_TABLE_TX_DEPTH)

#define MAX_ETH_PKT_LEN 1518
/*
	The MTU of an Ethernet is normally 1500 bytes (the maximum Ethernet packet size is 1518, which includes 14 bytes of header, 
	1500 bytes of payload, and 4 bytes of FCS). An IPv4 header is 20 bytes if it has no options, and a UDP header is 8 bytes, 
	so the maximum UDP payload size is 1500-28 = 1472.
	// total header bytes = 14 + 20 + 8 (not including the 4 eth crc bytes since hw appends that) = 42 bytes


*/

#define 	memorder 0
	// for atomic load and stores

// #include <cstdint>
// using std::uint8_t, std::uint16_t, std::uint64_t;
	// error

#ifndef	BOARD_H
#define	BOARD_H

// And, so that we can know what is and isn't defined
// from within our main.v file, let's include:
// #include <design.h>

//
// GPIO input wires
//
#define	GPIO_IN(WIRE)	(((WIRE)>>16)&1)
//
// GPIO output wires
//
#define	GPIO_SET(WIRE)	(((WIRE)<<16)|(WIRE))
#define	GPIO_CLR(WIRE)	 ((WIRE)<<16)

#define GPIO_ICLK_SDA		1
#define GPIO_ICLK_SCL		2
#define GPIO_ICLK_LOCKED	4
#define GPIO_ICLK_RESET		4
#define GPIO_HALT		8
#define GPIO_SIMHALT		GPIO_SET(GPIO_HALT)
#define GPIO_CPU_RESET		16
//
//


#define	FFT_LENGTH	(1 << 10)  // = 'd010000000000 = 1024


#define BUSPIC(X) (1<<X)	
//#define	BUSPIC_TIMER	BUSPIC(1)
	// equals 1<<1 = b 10 = d 2
	// BUSPIC_TIMER = 2
//#define	BUSPIC_NETRX	BUSPIC(7)
	// 1 << 7 = b 1000 0000 = d 128 = 0x80
	// BUSPIC_NETRX = = b 1000 0000 = d 128 = 0x80 
// #define	BUSPIC_NETTX	BUSPIC(6)  //#define BUSPIC(X) (1<<X) = 1000000 = 64

#define	CLKFREQHZ 50000000
#define	CLKFREQUENCYHZ 50000000


//
// ZIPTIMER input wires
//
//
//




typedef struct  CONSOLE_S {
	unsigned	u_setup;
	unsigned	u_fifo;
	unsigned	u_rx, u_tx;
} CONSOLE;

#define	_uart_txbusy	((_uart->u_fifo & 0x10000)==0)


//
// The Ethernet MDIO1 interface
//
#define MDIO1_BMCR	0x00
#define MDIO1_BMSR	0x01
#define MDIO1_PHYIDR1	0x02
#define MDIO1_PHYIDR2	0x03
#define MDIO1_ANAR	0x04
#define MDIO1_ANLPAR	0x05
#define MDIO1_ANLPARNP	0x05	// Duplicate register address
#define MDIO1_ANER	0x06
#define MDIO1_ANNPTR	0x07
#define MDIO1_PHYSTS	0x10
#define MDIO1_FCSCR	0x14
#define MDIO1_RECR	0x15
#define MDIO1_PCSR	0x16
#define MDIO1_RBR	0x17
#define MDIO1_LEDCR	0x18
#define MDIO1_PHYCR	0x19
#define MDIO1_BTSCR	0x1a
#define MDIO1_CDCTRL	0x1b
#define MDIO1_EDCR	0x1d

#ifndef	MDIO_H
#define	MDIO_H

typedef struct ENETMDIO_S {
	unsigned	e_v[32];
} ENETMDIO;

#endif // MDIO_H



#ifndef WBSCOPE_H
#define WBSCOPE_H

#define WBSCOPE_NO_RESET        0x80000000u
#define WBSCOPE_TRIGGER         (WBSCOPE_NO_RESET|0x08000000u)
#define WBSCOPE_MANUAL          (WBSCOPE_TRIGGER)
#define WBSCOPE_DISABLE         0x04000000u

typedef struct WBSCOPE_S {
        unsigned s_ctrl, s_data;
} WBSCOPE;
#endif


// Network packet interface
// Ethernet transmit macros
//   Transmit status
#define	ENET_TXBUSY		0x004000
//   Transmit command(s)
#define	ENET_TXGO		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
// Ethernet receive macros
//   Receive status
#define	ENET_RXLEN(CMD)		((CMD) & 0x03fff)  // 14'b11 1111 1111 1111 in verilog or 0b11 1111 1111 1111 in python
#define	ENET_RXAVAIL		0x004000  // 0100 0000 0000 0000 i.e., the 15th index idx[14] is 1 which is rx_bram_av?
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error  //0100 0000 0000 0000 0000 i.e, the 19th index, idx[18] is 1
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLR		0x004000  // same as RXAVAIL // 0100 0000 0000 0000 i.e., the 15th index idx[14] is 1 which is rx_bram_av?
//   Receive commands
#define	ENET_RXCLRERR		(ENET_RXMISS|ENET_RXERR|ENET_RXCRC|ENET_RXBUSY)

//0x010000 | 0x020000 | 0x040000 | 0x008000 = 0x78000 = d'491520 = b'0111 1000 0000 0000 0000

// Buffer sizes
#define	ENET_TXBUFLN(NET)	(1<<(NET->n_txcmd>>24))
#define	ENET_RXBUFLN(NET)	(1<<(NET->n_rxcmd>>24))


// #include <stdint.h>

typedef	struct ENETPACKET_S {
	unsigned	n_rxcmd, n_txcmd;  // size of unsigned is 4 bytes, 32 bits, and I think its an int
	uint64_t	n_mac;	// 8 bytes unsigned or 64 bit
	// std::uint64_t	n_mac;	// 8 bytes unsigned or 64 bit
	unsigned	n_rxmiss, n_rxerr, n_rxcrc, n_txcol;
} ENETPACKET;

#define	SYSINT_ENETRX	SYSINT(5)
#define	SYSINT_ENETTX	SYSINT(4)



#ifndef WBSCOPE_H
#define WBSCOPE_H

#define WBSCOPE_NO_RESET        0x80000000u
#define WBSCOPE_TRIGGER         (WBSCOPE_NO_RESET|0x08000000u)
#define WBSCOPE_MANUAL          (WBSCOPE_TRIGGER)
#define WBSCOPE_DISABLE         0x04000000u

typedef struct WBSCOPE_S {
        unsigned s_ctrl, s_data;
} WBSCOPE;
#endif

//#define GPIO_ACCESS
#ifdef	GPIO_ACCESS
#define	_BOARD_HAS_GPIO
static volatile unsigned *const _gpio = ((unsigned *)6291480);
#endif	// GPIO_ACCESS
#ifdef	FLASHCFG_ACCESS
#define	_BOARD_HAS_FLASHCFG
static volatile unsigned * const _flashcfg = ((unsigned *)(0x00100000));
#endif	// FLASHCFG_ACCESS
#define	_BOARD_HAS_BUSERR
static volatile unsigned *const _buserr = ((unsigned *)6291460);
#define	_BOARD_HAS_NET1DLY
static volatile unsigned *const _net1dly = ((unsigned *)0x0060001c);
#ifdef	WBFFT_ACCESS
#define	_BOARD_HAS_WBFFT
static volatile unsigned *const _wbfft_ctrl = ((unsigned *)0x00900000);
static volatile unsigned *const _wbfft_data = (unsigned *)&_wbfft_ctrl[FFT_LENGTH];;
#endif	// WBFFT_ACCESS

#ifdef	PWRCOUNT_ACCESS
static volatile unsigned *const _pwrcount = ((unsigned *)0x00600020);
#endif	// PWRCOUNT_ACCESS

#define	BUSPIC_ACCESS  //z
#ifdef	BUSPIC_ACCESS
#define	_BOARD_HAS_BUSPIC
//static volatile unsigned *const _buspic = ((unsigned *)0x00600008);  //11000000000000000001000
static volatile unsigned *const _buspic = ((unsigned *)0x21600008);  //11000000000000000001000
#endif	// BUSPIC_ACCESS

#define	_BOARD_HAS_BUILDTIME
#ifdef	FLASH_ACCESS
#define	_BOARD_HAS_FLASH
extern int _flash[1];
#endif	// FLASH_ACCESS

#define ZIPTIMER_ACCESS  //z
#ifdef	ZIPTIMER_ACCESS
#define	_BOARD_HAS_ZIPTIMER
static volatile unsigned *const _systimer = ((unsigned *)6291496);  // 0x00600028
#endif	// ZIPTIMER_ACCESS

#ifdef	SPIO_ACCESS
#define	_BOARD_HAS_SPIO
static volatile unsigned *const _spio = ((unsigned *)6291492);
#endif	// SPIO_ACCESS
#ifdef	BUSCONSOLE_ACCESS
#define	_BOARD_HAS_BUSCONSOLE
static volatile CONSOLE *const _uart = ((CONSOLE *)4194304);
#endif	// BUSCONSOLE_ACCESS
#ifdef	BKRAM_ACCESS
#define	_BOARD_HAS_BKRAM
extern char	_bkram[0x00010000];
#endif	// BKRAM_ACCESS
#define	_BOARD_HAS_VERSION


#ifdef	NETCTRL1_ACCESS
#define	_BOARD_HAS_NETMDIO1
static volatile ENETMDIO *const _mdio1 = ((ENETMDIO *)7340032);  // mdio pointer address
#endif	// NETCTRL1_ACCESS


#ifdef	NETSCOPE_SCOPE
#define	_BOARD_HAS_NETSCOPE
static volatile WBSCOPE *const _enetscope = ((WBSCOPE *)0x00200000);
#endif	// NETSCOPE_SCOPE

#define	_BOARD_HAS_ENETB
static volatile unsigned *const _netbrx = ((unsigned *)0x20800000);  // 0x00800000 = 1000 0000 0000 0000 0000 0000
// _netbrx = 0x00800000 = 1000 0000 0000 0000 0000 0000 
	// _netbrx[23] = 1 // with 2 addressing bits removed _netbrx[21] = 1
		// if 512 words (2048 bytes , i.e., from 0 till 2047) of pkt are read, then 
			// _netbrx byte address would be (+2047 (0x7FF) words) = 0x008001FF = 1000 0000 0000 0111 1111 1111
				// The above address with 2 LSB addressing bits removed for word addressing = 10 0000 0000 0001 1111 1111
					// The above address _netbrx[21] & _netbrx[8:0] = 1

// The tx pkt byte address is _netbtx = 0x00800800 = 1000 0000 0000 1000 0000 0000


// _netbrx read pkt len in bytes times max.. cx its atomic load char*.. the rv reads the word and then selects the byte it needs :3
/*
//memcpy(pkt->p_raw, (char *)_netbrx, pkt->p_rawlen+2);
void * MemcpyLW(void* dst, const void* src, unsigned int cnt)
{
    char *pszDest = (char *)dst;
    const char *pszSource =( const char*)src;
    if((pszDest!= NULL) && (pszSource!= NULL))
    {
        while(cnt) //till cnt
        {
            //Copy byte by byte
            //*(pszDest++)= *(pszSource++);
            //__atomic_store_n((char*)(pszDest++), *(pszSource++), memorder);  //p++ returns p then increments it for the next iter
            *(pszDest++) = __atomic_load_n((char*)(pszSource++), memorder);
            --cnt;
        }
    }
    return dst;
}
*/
static volatile unsigned *const _netbtx = ((unsigned *)(0x20800000 + (0x0400<<1)));  //// static volatile unsigned *const _netbtx = ((unsigned *)(0x00800000 + (0x0400<<1==800)));  //
// The tx pkt byte address is _netbtx = 0x00800800 = 1000 0000 0000 1000 0000 0000, _netbtx[23] & _netbtx[11] = 1
// 2 bits removed _netbtx[21] & _netbtx[9] = 1
	// the tx pkt byte address for max byte len 2048 is (+2047 (0x7ff)) -> _netbtx = 0x00800FFF =  1000 0000 0000 1111 1111 1111, _netbtx[23] & _netbtx[11:0] = 1
	// with two bits removed word addressubg is _netbtx[21] & _netbtx[9:0] = 1
#define NET1_ACCESS
#ifdef	NET1_ACCESS
#define	_BOARD_HAS_ENETP
static volatile ENETPACKET *const _net1 = ((ENETPACKET *)0x20500000);  // Ethnet data struct pointer address
// ENETPACKET *const _net1 = 0x00500000 = 0101 0000 0000 0000 0000 0000
	// _net1[22] & _net1[20] = 1 // with 2 addressing bits removed _net1[20] & _net1[18] = 1
		// from v file.. The following address condition is met i.e., for accessing CSRs in Network Subsystem
			// assign net1_sel = ((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h05) || ((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h05) ; // 0x500000 - 0x50001f // its for reading and writing tx, rx, mac ctrl regs and rx state value registers 

#endif	// NET1_ACCESS
/* 
typedef	struct ENETPACKET_S {
	unsigned	n_rxcmd, n_txcmd;
	uint64_t	n_mac;	// 8 bytes unsigned or 64 bit
	unsigned	n_rxmiss, n_rxerr, n_rxcrc, n_txcol;
} ENETPACKET;

*/

#define	NET_RX_FIFO_EMPTY(CMD)			((CMD) & 0x01)	// 0x1 = 0b0001  // wut is ds???? :O 
#define	NET_RX_PKT_AVAIL(CMD)			((CMD) & 0x04)  // 0x4 = 0b0100 
#define	NET_RX_PKT_LEN(CMD)				(((CMD) >> 0x10 ) & 0xffff)  // >> 0x10 means >> 16

// #define	NET_RX_PKT_VeBPF_DEST(CMD)		(((CMD) >> 0x07 ) & 0x7)  // & 0x7 means & 0b111, which would read the 3 bits of VeBPF dest

#define	NET_RX_PKT_VeBPF_DEST(CMD)		(((CMD) >> 0x07 ) & 0xff)  // & 0xff means & 0b1111_1111, which would read the 8 bits of VeBPF dest

#define	NET_RX_PKT_VeBPF_VALID(CMD)		(((CMD) >> 0x05 ) & 0x1)  // & 0x1 means & 0b1, which would read the 1 bit of VeBPF VALID
#define	NET_RX_PKT_VeBPF_ERROR(CMD)		(((CMD) >> 0x06 ) & 0x1)  // & 0x1 means & 0b1, which would read the 1 bit of VeBPF ERROR

#define NET_TX_PKT_DESC_TABLE_TX_FULL(CMD)		(CMD & 0x01)
#define NET_TX_PKT_DESC_TABLE_TX_EMPTY(CMD)		(CMD & 0x04) // means b0100 i.e., checking the 3rd bit 

#define	NET_RX_PKT_AVAIL_CLEAR		0x08 // 0b1000
#define	NET_RX_FIFO_RD_PTR_INC		0x10 // 0b0001 0000

#define	NET_TX_AVAIL_BIT		0x01 // 0b 0000 0001
#define	NET_TX_FIFO_WR_PTR_INC		0x02 // 0b 0000 0010

typedef struct NETWORK_CSR_S {
	// csr1 gives rx pkt len and rx status words // detailed desc below in block comments
	unsigned csr1, 
	// csr2 gives the rx pkt start mem addrs
	csr2, 
	// csr3 is for storing the starting mem addr for the heap mem allocated (by softcore possibly)
	csr3, 
	// csr4 is for storing the allocated size for the rx pkts in memory
	csr4,

	// NEED TO CHECK IF DESC_TABLE_TX is FULL before sending wr_ptr inc req..
	// so read csr5 before incrementing the wr_ptr by writing to csr5

	// csr5_tx1 is for reading if DESC_TABLE_TX is FULL. 
	// csr5_tx1 is also for writing the increment wr_ptr bit..
		// which will raise flag to network subsystem that memory address range for tx_pkts has been allocated and network subsystem is good to start tx of tx_pkts. 
		// and that the network subsystem is "armed" to starting tx-ing tx_pkts 
		// like what's happening in csr1.. when the fifo isn't empty anymore the network subsystem will start transmitting the tx_pkts..
	csr5_tx1,

	// csr6_tx1 is for writing the "tx_pkt_current_available_memory" total riscv allocated DDR current available tx memory (bytes) for debugging pruposes
	csr6_tx1,

	// csr7_tx1 is for reading the wr_fifo_ptr_tx_pkt_reg
	csr7_tx1,
	
	// csr8_tx1 is for reading the rd_fifo_ptr_tx_pkt_reg
	csr8_tx1,
	
	// csr9_tx1 is for writing tx_pkt length in bytes by riscv
	csr9_tx1,
	
	// csr10_tx1 is for writing tx_pkt length in words by riscv
	csr10_tx1,
	
	// csr11_tx1 is for writing the start mem address for the tx_pkt at wr_ptr by riscv
	csr11_tx1,  // same as csr18
	
	// csr12_tx1 is for writing the tx_pkt available bit for the tx_pkt at wr_ptr by riscv
	csr12_tx1, 

	// csr13_tx1 is for writing "tx_pkt_calculated_start_mem_addr_prev_wr_ptr" to network subsystem for debugging pruposes
	csr13_tx1,

	// csr14_tx1 is for writing "tx_pkt_calculated_start_mem_addr_curr_rd_ptr" to network subsystem for debugging pruposes
	csr14_tx1,

	// csr15_tx1 is for writing "tx_pkt_upper_limit_mem_addr" to network subsystem for debugging pruposes
	csr15_tx1,

	// csr16_tx1 is for writing "tx_pkt_calculated_start_mem_addr_prev_wr_ptr_delta" to network subsystem for debugging pruposes
	csr16_tx1,

	// csr17_tx1 is for writing "tx_pkt_start_mem_addr" to network subsystem for debugging pruposes
	csr17_tx1,

	// csr18_tx1 is for writing "tx_pkt_calculated_start_mem_addr_curr_wr_ptr" to network subsystem for debugging pruposes
	csr18_tx1,

	// csr19_tx1 is for writing "" to network subsystem for debugging pruposes
	csr19_tx1,

	// csr20_tx1 is for writing "tx_pkt_calculated_start_mem_addr_curr_rd_ptr_delta" to network subsystem for debugging pruposes
	csr20_tx1;

} NETWORK_CSR;


// this should be the default setting
static volatile NETWORK_CSR *const _net_csrs = ((NETWORK_CSR *)0x20900000);  // data struct pointer address

// for integration with PCIe in DISLv2 .. add _boardHv2 at end of c file with this setting
// static volatile NETWORK_CSR *const _net_csrs = ((NETWORK_CSR *)0x30900000);  // data struct pointer address

// csr1 gives rx pkt len and rx status words // detailed desc below in block comments
// csr1 addr is:
	// 0x20900000 after addr is normalized, 0x00900000 =  0000 0000 1001 0000 0000 0000 0000 0000  
	// _net_csrs->csr1[23] & _net_csrs>csr1[20] = 1 & _net_csrs>csr1[6] = 0 & _net_csrs>csr1[5] = 0
	// two LSB bits removed, _net_csrs>csr1[21] & _net_csrs>csr1[18] = 1 & _net_csrs>csr1[4] = 0  & _net_csrs>csr1[3] = 0 & _net_csrs>csr1[0] = 0
		// from verilog:
			/*
				// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
				assign net_csr1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[4] == 0) && (axi_araddr_twobits_del[3] == 0) && (axi_araddr_twobits_del[2] == 0) && (axi_araddr_twobits_del[1] == 0) && (axi_araddr_twobits_del[0] == 0)) || 
                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[4] == 0) && (axi_awaddr_twobits_del[3] == 0) && (axi_awaddr_twobits_del[2] == 0) && (axi_awaddr_twobits_del[1] == 0) && (axi_awaddr_twobits_del[0] == 0)));
			*/

// csr2 gives the rx pkt start mem addrs
// csr2 addr is: 
	// 0x20900004 after addr is normalized, 0x00900004 =  0000 0000 1001 0000 0000 0000 0000 0100  
	// _net_csrs>csr2[23] & _net_csrs>csr2[20] & _net_csrs>csr2[6] = 0 & _net_csrs>csr2[5] = 0 & _net_csrs>csr2[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr2[21] & _net_csrs>csr2[18] & _net_csrs>csr2[4] = 0 & _net_csrs>csr2[3] = 0  & _net_csrs>csr2[0] = 1
			// from verilog:
				/*	
					// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
					assign net_csr2 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[4] == 0) && (axi_araddr_twobits_del[3] == 0) && (axi_araddr_twobits_del[2] == 0) && (axi_araddr_twobits_del[1] == 0) && (axi_araddr_twobits_del[0] == 1)) || 
                   (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[4] == 0) && (axi_awaddr_twobits_del[3] == 0) && (axi_awaddr_twobits_del[2] == 0) && (axi_awaddr_twobits_del[1] == 0) && (axi_awaddr_twobits_del[0] == 1)));

				*/

// csr3 is for storing the starting mem addr for the heap mem allocated (by softcore possibly)
// csr3 addr is: 
	// 0x20900004 after addr is normalized, 0x00900008 =  0000 0000 1001 0000 0000 0000 0000 1000  
	// _net_csrs>csr3[23] & _net_csrs>csr3[20] & _net_csrs>csr3[6] = 0 & _net_csrs>csr3[5] = 0 & _net_csrs>csr3[3] = 1
		// with 2 LSB bits removed,  _net_csrs>csr3[21] & _net_csrs>csr3[18] & _net_csrs>csr3[4] = 0 & _net_csrs>csr3[3] = 0  & _net_csrs>csr3[1] = 1
			// from verilog:
				/*
					// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
					assign net_csr4 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[4] == 0) && (axi_araddr_twobits_del[3] == 0) && (axi_araddr_twobits_del[2] == 0) && (axi_araddr_twobits_del[1] == 1) && (axi_araddr_twobits_del[0] == 1)) || 
                   (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[4] == 0) && (axi_awaddr_twobits_del[3] == 0) && (axi_awaddr_twobits_del[2] == 0) && (axi_awaddr_twobits_del[1] == 1) && (axi_awaddr_twobits_del[0] == 1)));

				*/

// csr4 is for storing the allocated size for the rx pkts in memory
// csr4 addr is: 
	// 0x2090000C after addr is normalized, 0x0090000C =  0000 0000 1001 0000 0000 0000 0000 1100  
	// _net_csrs>csr4[23] & _net_csrs>csr4[20] & _net_csrs>csr4[6] = 0 & _net_csrs>csr4[5] = 0 & _net_csrs>csr4[3] = 1 & _net_csrs>csr4[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr4[21] & _net_csrs>csr4[18] & _net_csrs>csr4[4] = 0 & _net_csrs>csr4[3] = 0  & _net_csrs>csr4[1] = 1 & _net_csrs>csr4[0] = 1
			// from verilog:
				/*
					// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
					assign net_csr5_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[4] == 0) && (axi_araddr_twobits_del[3] == 0) && (axi_araddr_twobits_del[2] == 1) && (axi_araddr_twobits_del[1] == 0) && (axi_araddr_twobits_del[0] == 0)) || 
                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[4] == 0) && (axi_awaddr_twobits_del[3] == 0) && (axi_awaddr_twobits_del[2] == 1) && (axi_awaddr_twobits_del[1] == 0) && (axi_awaddr_twobits_del[0] == 0)));

				*/

// csr5_tx1 is for reading if DESC_TABLE_TX is FULL. 
// csr5_tx1 is also for writing the increment wr_ptr bit..
// csr5_tx1 addr is: 
	// 0x20900010 after addr is normalized, 0x00900010 =  0000 0000 1001 0000 0000 0000 0001 0000  
	// _net_csrs>csr5[23] & _net_csrs>csr5[20] & _net_csrs>csr5_tx1[6] = 0 & _net_csrs>csr5[5] = 0 & _net_csrs>csr5[4] = 1
		// with 2 LSB bits removed,  _net_csrs>csr5[21] & _net_csrs>csr5[18] & _net_csrs>csr5_tx1[4] = 0 & _net_csrs>csr5[3] = 0  & _net_csrs>csr5[2] = 1
			// from verilog:
				/*
					// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
					assign net_csr5_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[2] == 1) && (axi_araddr_twobits_del[1] == 0) && (axi_araddr_twobits_del[0] == 0)) || 
					                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[2] == 1) && (axi_awaddr_twobits_del[1] == 0) && (axi_awaddr_twobits_del[0] == 0)));
				*/

// csr6_tx1 is for writing the total available tx memory (bytes) for debugging pruposes
// csr6_tx1 addr is: 
	// 0x20900014 after addr is normalized, 0x00900014 =  0000 0000 1001 0000 0000 0000 0001 0100  
	// _net_csrs>csr6[23] & _net_csrs>csr6[20] & _net_csrs>csr6_tx1[6] = 0 & _net_csrs>csr6[5] = 0 & _net_csrs>csr6[4] = 1 & _net_csrs>csr6[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr6[21] & _net_csrs>csr6[18] & _net_csrs>csr6_tx1[4] = 0 & _net_csrs>csr6[3] = 0  & _net_csrs>csr6[2] = 1 & _net_csrs>csr6[0] = 1
			// from verilog: 
				/*	
					// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
					assign net_csr6_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[2] == 1) && (axi_araddr_twobits_del[1] == 0) && (axi_araddr_twobits_del[0] == 1)) || 
					                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[2] == 1) && (axi_awaddr_twobits_del[1] == 0) && (axi_awaddr_twobits_del[0] == 1)));

				*/

// csr7_tx1 is for reading the wr_fifo_ptr_tx_pkt_reg
// csr7_tx1 addr is: 
	// 0x20900018 after addr is normalized, 0x0090000C =  0000 0000 1001 0000 0000 0000 0001 1000  
	// _net_csrs>csr7[23] & _net_csrs>csr7[20] & _net_csrs>csr7_tx1[6] = 0 & _net_csrs>csr7[5] = 0 & _net_csrs>csr7[4] = 1 & _net_csrs>csr7[3] = 1
		// with 2 LSB bits removed,  _net_csrs>csr7[21] & _net_csrs>csr7[18] & _net_csrs>csr7_tx1[4] = 0 & _net_csrs>csr7[3] = 0  & _net_csrs>csr7[2] = 1 & _net_csrs>csr7[1] = 1
			// from verilog:
				/*
					// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
					assign net_csr7_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[2] == 1) && (axi_araddr_twobits_del[1] == 1) && (axi_araddr_twobits_del[0] == 0)) || 
					                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[2] == 1) && (axi_awaddr_twobits_del[1] == 1) && (axi_awaddr_twobits_del[0] == 0)));
			
				*/

// csr8_tx1 is for reading the rd_fifo_ptr_tx_pkt_reg
// csr8_tx1 addr is: 
	// 0x2090001C after addr is normalized, 0x0090001C =  0000 0000 1001 0000 0000 0000 0001 1100  
	// _net_csrs>csr8[23] & _net_csrs>csr8[20] & _net_csrs>csr8_tx1[6] = 0 & _net_csrs>csr8[5] = 0 & _net_csrs>csr8[4] = 1 & _net_csrs>csr8[3] = 1 & _net_csrs>csr8[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr8[21] & _net_csrs>csr8[18] & _net_csrs>csr8_tx1[4] = 0 & _net_csrs>csr8[3] = 0  & _net_csrs>csr8[2] = 1 & _net_csrs>csr8[1] = 1 & _net_csrs>csr8[0] = 1
			// from verilog:
				/*
					// needed to add && (axi_araddr_twobits_del[2] == 0) since we added 4 more csrs and we need to differentiate between them
					assign net_csr8_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[2] == 1) && (axi_araddr_twobits_del[1] == 1) && (axi_araddr_twobits_del[0] == 1)) || 
					                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[2] == 1) && (axi_awaddr_twobits_del[1] == 1) && (axi_awaddr_twobits_del[0] == 1)));
				*/

// csr9_tx1 is for writing tx_pkt length in bytes by riscv
// csr9_tx1 addr is: 
	// 0x20900020 after addr is normalized, 0x0090001C =  0000 0000 1001 0000 0000 0000 0010 0000  
	// _net_csrs>csr9[23] & _net_csrs>csr9[20] & _net_csrs>csr9_tx1[6] = 0 & _net_csrs>csr9[5] = 1 & _net_csrs>csr9[4] = 0 & _net_csrs>csr9[3] = 0 & _net_csrs>csr9[2] = 0
		// with 2 LSB bits removed,  _net_csrs>csr9[21] & _net_csrs>csr9[18] & _net_csrs>csr9_tx1[4] = 0 & _net_csrs>csr9[3] = 1 & _net_csrs>csr9[2] = 0 & _net_csrs>csr9[1] = 0 & _net_csrs>csr9[0] = 0
			// from verilog:
				/*
					assign net_csr9_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[3] == 1) && (axi_araddr_twobits_del[2] == 0) && (axi_araddr_twobits_del[1] == 0) && (axi_araddr_twobits_del[0] == 0)) || 
                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[3] == 1) && (axi_awaddr_twobits_del[2] == 0) && (axi_awaddr_twobits_del[1] == 0) && (axi_awaddr_twobits_del[0] == 0)));
				*/

// csr10_tx1 is for writing tx_pkt length in words by riscv
// csr10_tx1 addr is: 
	// 0x20900024 after addr is normalized, 0x0090001C =  0000 0000 1001 0000 0000 0000 0010 0100  
	// _net_csrs>csr10[23] & _net_csrs>csr10[20] & _net_csrs>csr10_tx1[6] = 0 & _net_csrs>csr10[5] = 1 & _net_csrs>csr10[4] = 0 & _net_csrs>csr10[3] = 0 & _net_csrs>csr10[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr10[21] & _net_csrs>csr10[18] & _net_csrs>csr10_tx1[4] = 0 & _net_csrs>csr10[3] = 1 & _net_csrs>csr10[2] = 0 & _net_csrs>csr10[1] = 0 & _net_csrs>csr10[0] = 1
			// from verilog:
			/*
				assign net_csr10_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[3] == 1) && (axi_araddr_twobits_del[2] == 0) && (axi_araddr_twobits_del[1] == 0) && (axi_araddr_twobits_del[0] == 1)) || 
                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[3] == 1) && (axi_awaddr_twobits_del[2] == 0) && (axi_awaddr_twobits_del[1] == 0) && (axi_awaddr_twobits_del[0] == 1)));		
			*/

// csr11_tx1 is for writing the start mem address for the tx_pkt at wr_ptr by riscv
// csr11_tx1 addr is: 
	// 0x20900028 after addr is normalized, 0x0090001C =  0000 0000 1001 0000 0000 0000 0010 1000  
	// _net_csrs>csr11[23] & _net_csrs>csr11[20] & _net_csrs>csr11_tx1[6] = 0 & _net_csrs>csr11[5] = 1 & _net_csrs>csr11[4] = 0 & _net_csrs>csr11[3] = 1 & _net_csrs>csr11[2] = 0
		// with 2 LSB bits removed,  _net_csrs>csr11[21] & _net_csrs>csr11[18] & _net_csrs>csr11_tx1[4] = 0 & _net_csrs>csr11[3] = 1 & _net_csrs>csr11[2] = 0 & _net_csrs>csr11[1] = 1 & _net_csrs>csr11[0] = 0
			// from verilog:
			/*
				assign net_csr11_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[3] == 1) && (axi_araddr_twobits_del[2] == 0) && (axi_araddr_twobits_del[1] == 1) && (axi_araddr_twobits_del[0] == 0)) || 
                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[3] == 1) && (axi_awaddr_twobits_del[2] == 0) && (axi_awaddr_twobits_del[1] == 1) && (axi_awaddr_twobits_del[0] == 0)));
			*/

// csr12_tx1 is for writing the tx_pkt available bit for the tx_pkt at wr_ptr by riscv
// csr12_tx1 addr is: 
	// 0x2090002C after addr is normalized, 0x0090001C =  0000 0000 1001 0000 0000 0000 0010 1100  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 0 & _net_csrs>csr12[5] = 1 & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12_tx1[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 0 & _net_csrs>csr12[1] = 1 & _net_csrs>csr12[0] = 1
			// from verilog:
			/*
				assign net_csr12_tx1 = ((((axi_araddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_araddr_twobits_del[3] == 1) && (axi_araddr_twobits_del[2] == 0) && (axi_araddr_twobits_del[1] == 1) && (axi_araddr_twobits_del[0] == 1)) || 
                    (((axi_awaddr_twobits_del[22:18] &  5'h1f) ==  5'h09) && (axi_awaddr_twobits_del[3] == 1) && (axi_awaddr_twobits_del[2] == 0) && (axi_awaddr_twobits_del[1] == 1) && (axi_awaddr_twobits_del[0] == 1)));
			*/

// csr13_tx1 is for writing "tx_pkt_calculated_start_mem_addr_prev_wr_ptr" to network subsystem for debugging pruposes
// csr13_tx1 addr is: 
	// 0x20900030 after addr is normalized, 0x00900030 =  0000 0000 1001 0000 0000 0000 0011 0000  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 0 & _net_csrs>csr12[5] = 1 & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 0
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 1 & _net_csrs>csr12[1] = 0 & _net_csrs>csr12[0] = 0
			// from verilog:
			/*
			*/

// csr14_tx1 is for writing "tx_pkt_calculated_start_mem_addr_curr_rd_ptr" to network subsystem for debugging pruposes
// csr14_tx1 addr is: 
	// 0x20900034 after addr is normalized, 0x00900034 =  0000 0000 1001 0000 0000 0000 0011 0100  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 0 & _net_csrs>csr12[5] = 1 & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 1 & _net_csrs>csr12[1] = 0 & _net_csrs>csr12[0] = 1
			// from verilog:
			/*
			*/

// csr15_tx1 is for writing "tx_pkt_upper_limit_mem_addr" to network subsystem for debugging pruposes
// csr15_tx1 addr is: 
	// 0x20900038 after addr is normalized, 0x00900038 =  0000 0000 1001 0000 0000 0000 0011 1000  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 0 & _net_csrs>csr12[5] = 1 & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 0
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 1 & _net_csrs>csr12[1] = 1 & _net_csrs>csr12[0] = 0
			// from verilog:
			/*
			*/

// csr16_tx1 is for writing "tx_pkt_calculated_start_mem_addr_prev_wr_ptr_delta" to network subsystem for debugging pruposes
// csr16_tx1 addr is: 
	// 0x2090003C after addr is normalized, 0x0090003C =  0000 0000 1001 0000 0000 0000 0011 1100  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 0 & _net_csrs>csr12[5] = 1 & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 1 & _net_csrs>csr12[1] = 1 & _net_csrs>csr12[0] = 1
			// from verilog:
			/*
			*/


// csr17_tx1 is for writing "tx_pkt_start_mem_addr" to network subsystem for debugging pruposes
// csr17_tx1 addr is: 
	// 0x20900040 after addr is normalized, 0x00900040 =  0000 0000 1001 0000 0000 0000 0100 0000  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 1 & _net_csrs>csr12[5] = 0 & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 0
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 0 & _net_csrs>csr12[1] = 0 & _net_csrs>csr12[0] = 0
			// from verilog:
			/*
			*/

// csr18_tx1 is for writing "tx_pkt_calculated_start_mem_addr_curr_wr_ptr" to network subsystem for debugging pruposes
// csr18_tx1 addr is: 
	// 0x20900044 after addr is normalized, 0x00900044 =  0000 0000 1001 0000 0000 0000 0100 0100  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 1 & _net_csrs>csr12[5] = 0 & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 0 & _net_csrs>csr12[1] = 0 & _net_csrs>csr12[0] = 1
			// from verilog:
			/*
			*/


// csr19_tx1 is for writing "" to network subsystem for debugging pruposes
// csr19_tx1 addr is: 
	// 0x20900048 after addr is normalized, 0x00900048 =  0000 0000 1001 0000 0000 0000 0100 1000  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 1 & _net_csrs>csr12[5] = 0 & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 0
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 0 & _net_csrs>csr12[1] = 1 & _net_csrs>csr12[0] = 0
			// from verilog:
			/*
			*/

// csr20_tx1 is for writing "tx_pkt_calculated_start_mem_addr_curr_rd_ptr_delta" to network subsystem for debugging pruposes
// csr20_tx1 addr is: 
	// 0x2090004C after addr is normalized, 0x0090004C =  0000 0000 1001 0000 0000 0000 0100 1100  
	// _net_csrs>csr12[23] & _net_csrs>csr12[20] & _net_csrs>csr12[6] = 1 & _net_csrs>csr12[5] = 0 & _net_csrs>csr12[4] = 0 & _net_csrs>csr12[3] = 1 & _net_csrs>csr12[2] = 1
		// with 2 LSB bits removed,  _net_csrs>csr12[21] & _net_csrs>csr12[18] & _net_csrs>csr12[4] = 1 & _net_csrs>csr12[3] = 0 & _net_csrs>csr12[2] = 0 & _net_csrs>csr12[1] = 1 & _net_csrs>csr12[0] = 1
			// from verilog:
			/*
			*/

/*  BLOCK COMMENT .. Previous Network Subsystem Pointers

	static volatile unsigned *const _net_mem_addr = ((unsigned *)(0x20900000)); 
	// 0x20900000 after addr is normalized, 0x00900000 =  0000 0000 1001 0000 0000 0000 0000 0000  // _net_mem_addr[23] & _net_mem_addr[20] = 1
		// two LSB bits removed, _net_mem_addr[21] & _net_mem_addr[18] = 1
	// this pointer is used to write the 32 bit pointer address to the network subsystem to 
	// write 1 random word into RAM using network subsystem
		// if we are writing a 2047 byte pkt, the _net_mem_addr would go till 0x209007FF
	// since we are writing 4 bytes at this addr reg using atomic write of unsigned, so the next availble addr after net mem addr shoule be
	// 0x20900004 i.e., 00100000100100000000000000000100 i.e., add b100 to the previous address.
		// reassigning _net_mem_csr1 according to this below..

	static volatile unsigned *const _net_mem_csr1 = ((unsigned *)(0x20910004));
	// 0x20910004 after addr is normalized, 0x00900004 =  0000 0000 1001 0001 0000 0000 0000 0100  // _net_mem_csr1[23] & _net_mem_csr1[20] & _net_mem_csr1[2] = 1
		// with 2 LSB bits removed,  _net_mem_csr1[21] & _net_mem_csr1[18] & _net_mem_csr1[0] = 1

	// prev comment:
		// static volatile unsigned *const _net_mem_csr1 = ((unsigned *)(0x20910000));
		// after addr is normalized, 0x00910000 =  0000 0000 1001 0001 0000 0000 0000 0000  // _net_mem_addr[23] & _net_mem_addr[20] & _net_mem_addr[16] = 1
			// with 2 LSB bits removed,  _net_mem_addr[21] & _net_mem_addr[18] & _net_mem_addr[14] = 1
		// use this address to read the network subsystem csr.. making one bit high telling the netowrk subsystem that the mem addr is available
		// causing the state mem writing machine to start writing a chosen word into the memory (the network subsystem will take control of the mem) 
		// from the processor) and then setting a csr mem written bit high in the mem csr1 after the word is written to mem and the network subsystem 
		// will give control of mem back to the processor and then // the c code will keep on looping until the csr mem written bit is high and then the c code will read from that mem address 
		// that the c code gave to the network subsystem and compare if it is the same word as our chosen word

	// ptr for writing allocated size for rx pkts writing to memory 
	static volatile unsigned *const _net_alloc_mem_size = ((unsigned *)(0x20910008));
	// 0x20910008 after addr is normalized, 0x00900008 =  0000 0000 1001 0001 0000 0000 0000 1000  // _net_alloc_mem_size[23] & _net_alloc_mem_size[20] & _net_alloc_mem_size[3] = 1
		// with 2 LSB bits removed,  _net_alloc_mem_size[21] & _net_alloc_mem_size[18] & _net_alloc_mem_size[1] = 1   

*/

#ifdef	FLASHSCOPE_SCOPC
#define	_BOARD_HAS_FLASHSCOPE
static volatile WBSCOPE *const _flashdbg = ((WBSCOPE *)0x00300000);
#endif	// FLASHSCOPE_SCOPC
//
// Interrupt assignments (2 PICs)
//
// PIC: picorv
#define	PICORV_GPIO	PICORV(0)
#define	PICORV_TIMER	PICORV(1)
#define	PICORV_UARTTXF	PICORV(2)
#define	PICORV_UARTRXF	PICORV(3)
#define	PICORV_NETTX	PICORV(4)
#define	PICORV_NETRX	PICORV(5)
// PIC: buspic
#define	BUSPIC_FFT	BUSPIC(0)
#define	BUSPIC_TIMER	BUSPIC(1)
#define	BUSPIC_SPIO	BUSPIC(2)
#define	BUSPIC_UARTTXF	BUSPIC(3)
#define	BUSPIC_UARTRXF	BUSPIC(4)
#define	BUSPIC_ENETSCOPE	BUSPIC(5)
#define	BUSPIC_NETTX	BUSPIC(6)  //#define BUSPIC(X) (1<<X) = 1000000 = 64
#define	BUSPIC_NETRX	BUSPIC(7)
#define	BUSPIC_FLASHDBG	BUSPIC(8)
#endif	// BOARD_H
